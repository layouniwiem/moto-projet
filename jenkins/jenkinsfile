// Jenkinsfile
pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = "localhost:5000"
        APP_NAME = "moto-app"
        APP_VERSION = "${env.BUILD_NUMBER}"
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Preparation') {
            steps {
                checkout scm
                sh 'pip install -r requirements.txt'
                sh 'pip install pytest pytest-flask pytest-cov'
            }
        }
        
        stage('Test') {
            steps {
                sh 'python -m pytest --cov=app tests/'
            }
            post {
                always {
                    junit 'test-reports/*.xml'
                    publishHTML(
                        target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'coverage',
                            reportFiles: 'index.html',
                            reportName: 'Coverage Report'
                        ]
                    )
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner -Dsonar.projectKey=moto-app -Dsonar.sources=.'
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION} .'
                sh 'docker tag ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION} ${DOCKER_REGISTRY}/${APP_NAME}:latest'
            }
        }
        
        stage('Security Scan') {
            steps {
                sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}'
            }
        }
        
        stage('Push Image') {
            steps {
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}'
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}:latest'
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                sh 'mkdir -p ~/.kube'
                sh 'cp $KUBECONFIG ~/.kube/config'
                
                // Appliquer les manifestes Kubernetes
                sh 'kubectl apply -f kubernetes/namespace.yaml'
                sh 'kubectl apply -f kubernetes/secrets.yaml'
                sh 'kubectl apply -f kubernetes/config-map.yaml'
                sh 'kubectl apply -f kubernetes/persistent-volumes.yaml'
                sh 'kubectl apply -f kubernetes/db-init-configmap.yaml'
                sh 'kubectl apply -f kubernetes/mariadb-deployment.yaml'
                sh 'kubectl apply -f kubernetes/mariadb-service.yaml'
                
                // Remplacer les variables dans le fichier de déploiement de l'application
                sh 'cat kubernetes/flask-deployment.yaml | sed "s|\${DOCKER_REGISTRY}|${DOCKER_REGISTRY}|g" | sed "s|\${APP_VERSION}|${APP_VERSION}|g" | kubectl apply -f -'
                sh 'kubectl apply -f kubernetes/flask-service.yaml'
                sh 'kubectl apply -f kubernetes/ingress.yaml'
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh 'kubectl rollout status deployment/flask-app -n moto-app'
            }
        }
    }
    
    post {
        success {
            echo 'Déploiement réussi !'
            slackSend(color: 'good', message: "Déploiement de ${APP_NAME}:${APP_VERSION} réussi")
        }
        failure {
            echo 'Le déploiement a échoué.'
            slackSend(color: 'danger', message: "Déploiement de ${APP_NAME}:${APP_VERSION} échoué")
        }
        always {
            cleanWs()
        }
    }
}