pipeline {
    agent any

    parameters {
        string(name: 'DOCKERFILE_NAME', defaultValue: 'Dockerfile.web', description: 'Nom du Dockerfile √† utiliser')
    }

    environment {
        DOCKER_REGISTRY = "docker.io/layouniwiem"
        APP_NAME = "moto-app"
        APP_VERSION = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/layouniwiem/moto-projet.git', branch: 'main'
            }
        }

        stage('Install dependencies') {
            steps {
                dir('app') {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        pip install pytest pytest-flask pytest-cov
                    '''
                }
            }
        }

        stage('Test') {
            steps {
                dir('app') {
                    script {
                        try {
                            sh '''
                                export PYTHONPATH=$PWD
                                mkdir -p test-reports
                                ./venv/bin/python -m pytest ../test --cov=app --cov-report=html --junitxml=test-reports/results.xml
                            '''
                        } catch (err) {
                            echo "‚ö†Ô∏è Tests √©chou√©s : ${err.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
            post {
                always {
                    junit 'app/test-reports/*.xml'
                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'app/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ]
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                dir('app') {
                    sh '''
                        if ! docker info > /dev/null 2>&1; then
                            echo "‚ùå Jenkins n'a pas acc√®s √† Docker."
                            exit 1
                        fi
                    '''
                    sh "docker build -f ${params.DOCKERFILE_NAME} -t ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION} ."
                    sh "docker tag ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION} ${DOCKER_REGISTRY}/${APP_NAME}:latest"
                }
            }
        }

        stage('Login to Docker Hub') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                sh "docker push ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}"
                sh "docker push ${DOCKER_REGISTRY}/${APP_NAME}:latest"
            }
        }

        stage('Security Scan') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                script {
                    try {
                        sh '''
                            mkdir -p "$HOME/.local/bin"
                            export PATH="$HOME/.local/bin:$PATH"
                            if ! command -v trivy > /dev/null; then
                                echo "Installation de Trivy..."
                                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b "$HOME/.local/bin"
                            fi
                            trivy --version
                            trivy image --timeout 10m --scanners vuln ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}
                        '''
                    } catch (err) {
                        echo "‚ö†Ô∏è Analyse Trivy √©chou√©e : ${err.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Install kubectl') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                sh '''
                    if ! command -v kubectl > /dev/null; then
                        echo "Installation de kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/
                    fi
                    kubectl version --client
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                        mkdir -p $HOME/.kube
                        cp "$KUBECONFIG_FILE" $HOME/.kube/config
                        chmod 600 $HOME/.kube/config
                        export KUBECONFIG=$HOME/.kube/config

                        kubectl cluster-info

                        kubectl apply -f k8s/namespace.yml
                        kubectl apply -f k8s/secrets.yaml
                        kubectl apply -f k8s/config-map.yaml

                        kubectl delete configmap db-init-script -n moto-app --ignore-not-found=true
                        kubectl apply -f k8s/db-init-configmap.yaml

                        kubectl apply -f k8s/mariadb-pv-pvc.yaml  
                        kubectl apply -f k8s/persistent-volumes.yaml
                        kubectl apply -f k8s/mariadb-deployment.yaml
                        kubectl apply -f k8s/mariadb-service.yaml

                        echo "‚è≥ Attente de MariaDB..."
                        kubectl wait --for=condition=ready pod -l app=mariadb -n moto-app --timeout=300s || true
                    '''

                    // ‚úÖ Substitution correcte des variables dans le fichier YAML
                    sh """
                        sed 's|\\\${DOCKER_REGISTRY}|${DOCKER_REGISTRY}|g' k8s/flask-deployment.yaml | \
                        sed 's|\\\${APP_NAME}|${APP_NAME}|g' | \
                        sed 's|\\\${APP_VERSION}|${APP_VERSION}|g' > /tmp/flask-deployment-temp.yaml

                        echo "üìÑ Contenu final du fichier flask-deployment :"
                        cat /tmp/flask-deployment-temp.yaml

                        kubectl apply -f /tmp/flask-deployment-temp.yaml
                        kubectl apply -f k8s/flask-service.yaml
                        kubectl apply -f k8s/ingress.yaml

                        rm -f /tmp/flask-deployment-temp.yaml
                    """
                }
            }
        }

        stage('Verify Deployment') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                        export KUBECONFIG=$HOME/.kube/config

                        echo "‚è≥ V√©rification du d√©ploiement..."
                        kubectl rollout status deployment/flask-app -n moto-app --timeout=600s

                        echo "üì¶ √âtat des ressources :"
                        kubectl get all -n moto-app

                        echo "üìã √âv√©nements r√©cents :"
                        kubectl get events -n moto-app --sort-by='.lastTimestamp' | tail -10

                        echo "üìã Logs des pods Flask (si disponibles) :"
                        kubectl logs -l app=flask-app -n moto-app --tail=50 || echo "Aucun log disponible"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ D√©ploiement r√©ussi !'
        }
        unstable {
            echo '‚ö†Ô∏è D√©ploiement instable (tests ou scan de s√©curit√© √©chou√©s).'
        }
        failure {
            echo '‚ùå Le d√©ploiement a √©chou√©.'
        }
        always {
            sh 'rm -rf $HOME/.kube || true'
            cleanWs()
        }
    }
}
