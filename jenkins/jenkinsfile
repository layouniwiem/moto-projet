pipeline {
    agent any

    parameters {
        string(name: 'DOCKERFILE_NAME', defaultValue: 'Dockerfile.web', description: 'Nom du Dockerfile √† utiliser')
    }

    environment {
        DOCKER_REGISTRY = "docker.io/layouniwiem"
        APP_NAME = "moto-app"
        APP_VERSION = "${env.BUILD_NUMBER}"
        KUBECONFIG_DIR = "/tmp/.kube"
        KUBECONFIG_PATH = "/tmp/.kube/config"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/layouniwiem/moto-projet.git', branch: 'main'
            }
        }

        stage('Install dependencies') {
            steps {
                dir('app') {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        pip install pytest pytest-flask pytest-cov
                    '''
                }
            }
        }

       
        stage('Build Docker Image') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                dir('app') {
                    sh '''
                        if ! docker info > /dev/null 2>&1; then
                            echo "‚ùå Jenkins n'a pas acc√®s √† Docker."
                            exit 1
                        fi
                    '''
                    sh "docker build -f ${params.DOCKERFILE_NAME} -t ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION} ."
                    sh "docker tag ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION} ${DOCKER_REGISTRY}/${APP_NAME}:latest"
                }
            }
        }

        stage('Login to Docker Hub') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }
    
   stage('Security Scan') {
    when {
        expression { currentBuild.result != 'FAILURE' }
    }
    steps {
        script {
            try {
                sh '''
                    # R√©pertoire local pour Trivy
                    mkdir -p "$HOME/.local/bin"
                    export PATH="$HOME/.local/bin:$PATH"

                    # Installer Trivy localement s'il n'existe pas
                    if ! command -v trivy > /dev/null; then
                        echo "Installation de Trivy..."
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b "$HOME/.local/bin"
                    fi

                    # V√©rifier que Trivy fonctionne
                    trivy --version

                    # Lancer le scan
                    trivy image --timeout 10m --scanners vuln ${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}
                '''
            } catch (err) {
                echo "‚ö†Ô∏è Analyse Trivy √©chou√©e : ${err.getMessage()}"
                currentBuild.result = 'UNSTABLE'
            }
        }
    }
}


 stage('Test') {
    steps {
        dir('app') {
            script {
                try {
                    sh '''
                        ./venv/bin/python -m pytest ../test --cov=app --cov-report=html --junitxml=test-reports/results.xml
                    '''
                } catch (err) {
                    echo "‚ö†Ô∏è Tests √©chou√©s : ${err.getMessage()}"
                    currentBuild.result = 'UNSTABLE'
                }
            }
        }
    }
    post {
        always {
            junit 'app/test-reports/*.xml'
            publishHTML target: [
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'app/htmlcov',
                reportFiles: 'index.html',
                reportName: 'Coverage Report'
            ]
        }
    }
}

        stage('Deploy to Kubernetes') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            agent {
                docker {
                    image 'bitnami/kubectl:latest'
                    args '--entrypoint=""'
                }
            }
            steps {
                git url: 'https://github.com/layouniwiem/moto-projet.git', branch: 'main'

                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                        mkdir -p /tmp/.kube
                        cp "$KUBECONFIG_FILE" /tmp/.kube/config
                        export KUBECONFIG=/tmp/.kube/config

                        kubectl apply -f k8s/namespace.yml
                        kubectl apply -f k8s/secrets.yaml
                        kubectl apply -f k8s/config-map.yaml
                        kubectl apply -f k8s/mariadb-pv-pvc.yaml  
                        kubectl apply -f k8s/persistent-volumes.yaml
                        kubectl apply -f k8s/db-init-configmap.yaml
                        kubectl apply -f k8s/mariadb-deployment.yaml
                        kubectl apply -f k8s/mariadb-service.yaml

                        sed -e "s|\\${DOCKER_REGISTRY}|${DOCKER_REGISTRY}|g" \
                            -e "s|\\${APP_VERSION}|${APP_VERSION}|g" k8s/flask-deployment.yaml | kubectl apply -f -

                        kubectl apply -f k8s/flask-service.yaml
                        kubectl apply -f k8s/ingress.yaml
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                        mkdir -p /tmp/.kube
                        cp "$KUBECONFIG_FILE" /tmp/.kube/config
                        export KUBECONFIG=/tmp/.kube/config

                        echo "‚è≥ V√©rification du d√©ploiement..."
                        kubectl rollout status deployment/flask-app -n moto-app

                        echo "üì¶ Liste des pods :"
                        kubectl get pods -n moto-app
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ D√©ploiement r√©ussi !'
        }
        unstable {
            echo '‚ö†Ô∏è D√©ploiement instable (tests ou scan de s√©curit√© √©chou√©s).'
        }
        failure {
            echo '‚ùå Le d√©ploiement a √©chou√©.'
        }
        always {
            sh 'rm -rf /tmp/.kube || true'
            cleanWs()
        }
    }
}
