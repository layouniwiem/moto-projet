---

    # Vérifier et installer Docker si nécessaire
    - name: Vérifier si Docker est installé
      command: docker --version
      register: docker_installed
      ignore_errors: yes

    - name: Installer Docker si nécessaire
      become: true
      apt:
        name: docker-ce
        state: present
      when: docker_installed.failed

    - name: Démarrer et activer Docker
      become: true
      systemd:
        name: docker
        enabled: yes
        state: started
      when: docker_installed.failed

    # Déployer le conteneur MariaDB
    - name: Vérifier si Docker est en cours d'exécution
      service:
        name: docker
        state: started
      become: yes

  

    - name: Télécharger l'image MariaDB depuis Docker Hub
      docker_image:
        name: "{{ mariadb_image }}"
        source: pull

    - name: Vérifier si le conteneur {{ mariadb_container_name }} existe
      command: docker ps -a --format "{{ '{{' }}.Names{{ '}}' }}"
      register: existing_containers
      changed_when: false

    - name: Déployer le conteneur MariaDB
      docker_container:
        name: "{{ mariadb_container_name }}"
        image: "{{ mariadb_image }}"
        state: started
        restart_policy: always
        ports:
          - "{{ mariadb_port }}:3306"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mariadb_root_password }}"
          MYSQL_DATABASE: "{{ mariadb_database }}"
          MYSQL_USER: "{{ mariadb_user }}"
          MYSQL_PASSWORD: "{{ mariadb_user_password }}"
        volumes:
          - /var/lib/mysql:/var/lib/mysql  # Persistance des données

  


# Playbook pour l'installation et la configuration de MariaDB dans Docker




    # Vérifier si MariaDB est en cours d'exécution dans Docker
    - name: Vérifier si MariaDB est en cours d'exécution dans Docker
      command: docker ps -a --format "{{ '{{' }}.Names{{ '}}' }}"
      register: mariadb_container
      changed_when: false
      failed_when: false


    - name: Vérifier si un conteneur MariaDB est trouvé
      debug:
        msg: "Conteneur MariaDB trouvé : {{ mariadb_container.stdout }}"
      when: mariadb_container.stdout != ""

    - name: Lancer MariaDB dans Docker si non trouvé
      docker_container:
        name: mariadb
        image: mariadb:latest
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ mariadb_root_password }}"
          MYSQL_DATABASE: "{{ mariadb_database }}"
          MYSQL_USER: "{{ mariadb_user }}"
          MYSQL_PASSWORD: "{{ mariadb_user_password }}"
        ports:
          - "3306:3306"
      when: mariadb_container.stdout == ""

    # Vérifier si MariaDB répond
    - name: Vérifier si MariaDB répond
      command: docker exec mariadb mysqladmin -u root -p{{ mariadb_root_password }} ping
      register: mariadb_ping
      ignore_errors: yes
      failed_when: mariadb_ping.rc != 0

    # Créer la base de données MariaDB via Docker
    - name: Créer la base de données MariaDB via Docker
      command: docker exec mariadb mysql -u root -p{{ mariadb_root_password }} -e "CREATE DATABASE {{ mariadb_database }};"
      when: mariadb_ping.rc == 0

    # Créer un utilisateur MariaDB via Docker
    - name: Créer un utilisateur MariaDB via Docker
      command: docker exec mariadb mysql -u root -p{{ mariadb_root_password }} -e "CREATE USER '{{ mariadb_user }}'@'%' IDENTIFIED BY '{{ mariadb_user_password }}';"
      when: mariadb_ping.rc == 0

    # Donner des privilèges à l'utilisateur MariaDB via Docker
    - name: Donner des privilèges à l'utilisateur MariaDB via Docker
      command: docker exec mariadb mysql -u root -p{{ mariadb_root_password }} -e "GRANT ALL PRIVILEGES ON {{ mariadb_database }}.* TO '{{ mariadb_user }}'@'%';"
      when: mariadb_ping.rc == 0

    # Modifier la configuration pour écouter sur toutes les interfaces (si nécessaire)
    - name: Modifier la configuration MariaDB pour écouter sur toutes les interfaces (Debian/Ubuntu)
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
      notify: Redémarrer MariaDB
      when: ansible_os_family == "Debian" and mariadb_ping.rc == 0

    - name: Modifier la configuration MariaDB pour écouter sur toutes les interfaces (RHEL/CentOS)
      lineinfile:
        path: /etc/my.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
      notify: Redémarrer MariaDB
      when: ansible_os_family == "RedHat" and mariadb_ping.rc == 0

    # Redémarrer MariaDB pour appliquer les changements
    - name: Redémarrer MariaDB pour appliquer les changements
      service:
        name: mariadb
        state: restarted
      when: mariadb_ping.rc == 0
